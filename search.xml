<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>上传文件到服务器</title>
    <url>/2022/03/15/upload-files/</url>
    <content><![CDATA[<p>前后端（<a href="https://cn.vuejs.org/index.html">Vue</a> + <a href="https://nodejs.org/zh-cn/">Node</a>）实现上传文件并保存到服务器。input + axios +  <a href="https://www.npmjs.com/package/body-parser">body-parser</a> + fs 模块 读取写入数据。</p>
<h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><blockquote>
<p>部分为 Vue 代码</p>
</blockquote>
<h5 id="使用-input（file）标签"><a href="#使用-input（file）标签" class="headerlink" title="使用 input（file）标签"></a>使用 input（file）标签</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">ref</span>=<span class="string">&quot;file&quot;</span> </span></span><br><span class="line"><span class="tag">       @<span class="attr">change</span>=<span class="string">&quot;change&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参数解释</p>
<table>
<thead>
<tr>
<th align="left">参数名</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">multiple</td>
<td>是否可以一次选择多个文件</td>
</tr>
<tr>
<td align="left">type = “file”</td>
<td>设置后选择文件，可以得到一个 File 对象</td>
</tr>
<tr>
<td align="left">$refs.file.value</td>
<td>input 的值为上传文件在本地的绝对地址</td>
</tr>
<tr>
<td align="left">@change</td>
<td>选择的文件发生变化时触发的事件</td>
</tr>
</tbody></table>
<h5 id="File-对象"><a href="#File-对象" class="headerlink" title="File 对象"></a>File 对象</h5><p>前端上传二进制文件就靠这个对象了。如果直接打印File对象可以得到文件名，读取时间大小等信息 ….</p>
<p>特别注意！这些信息都是只读的，不可直接修改。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">change</span> (e) &#123;</span><br><span class="line">	<span class="comment">// files 数组</span></span><br><span class="line">	<span class="keyword">const</span> files = e.<span class="property">target</span>.<span class="property">files</span>;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(files)</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> file <span class="keyword">of</span> files) &#123;</span><br><span class="line">		<span class="comment">// file 对象</span></span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(file)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>File 对象</p>
<img src="https://gitee.com/nck-0601/pic-go/raw/master/img/file%E5%AF%B9%E8%B1%A1.png" alt="file对象" style="zoom:70%;" />

<p>File 对象数组</p>
<img src="https://gitee.com/nck-0601/pic-go/raw/master/img/files%E6%95%B0%E7%BB%84.png" alt="files数组" style="zoom:70%;" />

<h5 id="FileReader-对象"><a href="#FileReader-对象" class="headerlink" title="* FileReader 对象"></a>* FileReader 对象</h5><p>读取 File 对象（文件）的二进制数据</p>
<p><text style='color:red;'>特别注意！</text>FileReader.readAsBinaryString() 方法，我在使用中经常出问题，不建议使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">change</span> (e) &#123;</span><br><span class="line">	<span class="keyword">const</span> files = e.<span class="property">target</span>.<span class="property">files</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> file <span class="keyword">of</span> files) &#123;</span><br><span class="line">  		<span class="comment">// 读数据</span></span><br><span class="line">		<span class="keyword">let</span> fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">        <span class="comment">// 读为文本</span></span><br><span class="line">        <span class="comment">// fr.readAsText(file)</span></span><br><span class="line">        <span class="comment">// 读为图片（Base64编码）</span></span><br><span class="line">        <span class="comment">// fr.readAsDataURL(file)</span></span><br><span class="line">        <span class="comment">// 读为二进制流</span></span><br><span class="line">		fr.<span class="title function_">readAsArrayBuffer</span>(file)</span><br><span class="line">        <span class="comment">// FileReader 对象的事件</span></span><br><span class="line">        <span class="comment">// 读取成功</span></span><br><span class="line">        fr.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 读取到的 ArrayBuffer</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(fr.<span class="property">result</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 读取失败</span></span><br><span class="line">        fr.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;Oop!error...&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 读取结束（不管成功还是失败）</span></span><br><span class="line">        fr.<span class="property">onloadend</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End...&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Axios-发送-ArrayBuffer-对象"><a href="#Axios-发送-ArrayBuffer-对象" class="headerlink" title="* Axios 发送 ArrayBuffer 对象"></a>* Axios 发送 ArrayBuffer 对象</h5><p>ArrayBuffer 是无法直接发送出去的，需要转换为 Json 对象后发出。</p>
<p>这里提供一个转换函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ArrayBufferToJson</span> (arrayBuffer) &#123;</span><br><span class="line">	<span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">Buffer</span>(arrayBuffer.<span class="property">byteLength</span>);</span><br><span class="line">      <span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arrayBuffer);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; buffer.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">        buffer[i] = view[i];</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> buffer.<span class="title function_">toJSON</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把文件数据和要发给后端的其他信息放入一个对象中</span></span><br><span class="line"><span class="keyword">let</span> sendObj = &#123;</span><br><span class="line">    <span class="attr">uid</span>: <span class="number">001</span>,</span><br><span class="line">    <span class="attr">name</span>: ’<span class="title class_">NiChengKai</span>的测试文件‘,</span><br><span class="line">    <span class="comment">// 使用上面的函数</span></span><br><span class="line">    <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="title class_">ArrayBufferToJson</span>(fr.<span class="property">result</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="以-Json-形式发送"><a href="#以-Json-形式发送" class="headerlink" title="以 Json 形式发送"></a>以 Json 形式发送</h5><p>由于数据很大，所以只能POST</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">data</span>: res&#125; = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;后端地址&#x27;</span>, sendObj, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="comment">// 关键</span></span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>完整代码</p>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 准备发送数据的数组</span></span><br><span class="line"><span class="keyword">let</span> sendList = [],</span><br><span class="line"><span class="comment">// 结果数组</span></span><br><span class="line"><span class="keyword">let</span> resultList = [],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ArrayBufferToJson</span> (arrayBuffer) &#123;</span><br><span class="line">	<span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">Buffer</span>(arrayBuffer.<span class="property">byteLength</span>);</span><br><span class="line">      <span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arrayBuffer);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; buffer.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">        buffer[i] = view[i];</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> buffer.<span class="title function_">toJSON</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 选择文件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">change</span> (e) &#123;</span><br><span class="line">	<span class="keyword">const</span> files = e.<span class="property">target</span>.<span class="property">files</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> file <span class="keyword">of</span> files) &#123;</span><br><span class="line">		<span class="keyword">let</span> fr = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">		fr.<span class="title function_">readAsArrayBuffer</span>(file)</span><br><span class="line">        fr.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> sendObj = &#123;</span><br><span class="line">                <span class="attr">uid</span>: <span class="number">001</span>,</span><br><span class="line">                <span class="attr">name</span>: ’<span class="title class_">NiChengKai</span>的测试文件‘,</span><br><span class="line">                <span class="attr">data</span>: <span class="title class_">ArrayBufferToJson</span>(fr.<span class="property">result</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            sendList.<span class="title function_">push</span>(sendObj)</span><br><span class="line">        &#125;</span><br><span class="line">        fr.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;Oop!error...&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        fr.<span class="property">onloadend</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End...&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上传</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">submit</span> () &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> sendObj <span class="keyword">of</span> sendList) &#123;</span><br><span class="line">       <span class="keyword">let</span> &#123;<span class="attr">data</span>: res&#125; = <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;后端地址&#x27;</span>, sendObj, &#123;<span class="attr">headers</span>: &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;&#125;);</span><br><span class="line">        resultList.<span class="title function_">push</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">    sendList = [],</span><br><span class="line">    <span class="comment">// 记得清除 input 的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><blockquote>
<p>后端我使用的是 Node + Express </p>
</blockquote>
<h5 id="跨域设置"><a href="#跨域设置" class="headerlink" title="跨域设置"></a>跨域设置</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="comment">// 跨域配置</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="comment">// noinspection JSCheckFunctionSignatures</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>(&#123;</span><br><span class="line">	<span class="attr">origin</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">	<span class="attr">optionsSuccessStatus</span>: <span class="number">200</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h5 id="配置-body-parser-中间件"><a href="#配置-body-parser-中间件" class="headerlink" title="配置 body-parser 中间件"></a>配置 body-parser 中间件</h5><p>由于使用了 POST请求 ，需要配置 body-parser 中间件解析 POST请求 的参数。</p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install body-parser</span><br></pre></td></tr></table></figure>

<p>引入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置解析为 Json 格式并设置数据最大限制</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>(&#123;</span><br><span class="line">	<span class="attr">limit</span>: <span class="string">&#x27;40mb&#x27;</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<h5 id="读取二进制数据"><a href="#读取二进制数据" class="headerlink" title="读取二进制数据"></a>读取二进制数据</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要导入 fs 模块</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// result 为二进制数据</span></span><br><span class="line">	<span class="keyword">let</span> &#123;uid, name, result&#125; = req.<span class="property">body</span>;</span><br><span class="line">	<span class="comment">// 把字符串形式的 Buffer 填充入 Buffer 对象中</span></span><br><span class="line">	result = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(result)</span><br><span class="line">	<span class="comment">// 写文件</span></span><br><span class="line">	fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;文件路径&#x27;</span>, <span class="function">(<span class="params">result, err</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (!err) &#123;</span><br><span class="line">			res.<span class="title function_">send</span>(name + <span class="string">&#x27; 上传成功！&#x27;</span>)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			res.<span class="title function_">send</span>(name + <span class="string">&#x27;上传失败！&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>More Music</title>
    <url>/2022/03/04/More-Music/</url>
    <content><![CDATA[<p><a href="https://github.com/">More Music v1.0 </a>第一轮内测已经开始啦！支持网易云音乐，QQ音乐，BiliBili 三平台搜索和下载，登录后同步收藏夹，VIP破解。快来<a href="">下载</a>试用吧！</p>
<h2 id="More-Music"><a href="#More-Music" class="headerlink" title="More Music"></a>More Music</h2>]]></content>
  </entry>
</search>
